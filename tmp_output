.IFJcode18
DEFVAR GF@_exp_res
DEFVAR GF@_aux_1
DEFVAR GF@_aux_2
DEFVAR GF@_aux_3
DEFVAR GF@_exp_res_type
DEFVAR GF@_aux_1_type
DEFVAR GF@_aux_2_type
DEFVAR GF@_aux_3_type
JUMP &&main

 LABEL &length
 PUSHFRAME
 DEFVAR LF@_rval_type
 TYPE LF@_rval_type LF@_0
 JUMPIFNEQ &strlenexit LF@_rval_type string@string
 DEFVAR LF@_rval
 STRLEN LF@_rval LF@_0
 POPFRAME
 RETURN
 LABEL &strlenexit
 EXIT int@4

 LABEL &substr
 PUSHFRAME
 DEFVAR LF@_rval_type
 TYPE LF@_rval_type LF@_0
 JUMPIFNEQ &substrexit LF@_rval_type string@string
 TYPE LF@_rval_type LF@_1
 JUMPIFNEQ &substrexit LF@_rval_type string@int
 TYPE LF@_rval_type LF@_2
 JUMPIFNEQ &substrexit LF@_rval_type string@int
 DEFVAR LF@_rval
 MOVE LF@_rval string@
 DEFVAR LF@str_len
 CREATEFRAME
 DEFVAR TF@_0
 MOVE TF@_0 LF@_0
 CALL &length
 MOVE LF@str_len TF@_rval
 DEFVAR LF@ret_cond
 LT LF@ret_cond LF@str_len int@0
 JUMPIFEQ &substr&return LF@ret_cond bool@true
 EQ LF@ret_cond LF@str_len int@0
 JUMPIFEQ &substr&return LF@ret_cond bool@true
 LT LF@ret_cond LF@_1 int@0
<<<<<<< Updated upstream
 JUMPIFEQ &substr&return LF@ret_cond bool@true
 EQ LF@ret_cond LF@_1 int@0
 JUMPIFEQ &substr&return LF@ret_cond bool@true
 GT LF@ret_cond LF@_1 LF@str_len
 JUMPIFEQ &substr&return LF@ret_cond bool@true
 EQ LF@ret_cond LF@_2 int@0
 JUMPIFEQ &substr&return LF@ret_cond bool@true
=======
 JUMPIFEQ &substr&returnfail LF@ret_cond bool@true
 GT LF@ret_cond LF@_1 LF@str_len
 JUMPIFEQ &substr&returnfail LF@ret_cond bool@true
 LT LF@ret_cond LF@_2 int@0
 JUMPIFEQ &substr&returnfail LF@ret_cond bool@true
>>>>>>> Stashed changes
 DEFVAR LF@max_n
 MOVE LF@max_n LF@str_len
 SUB LF@max_n LF@max_n LF@_1
 DEFVAR LF@edit_n_cond
 GT LF@edit_n_cond LF@_2 LF@max_n
 JUMPIFEQ &substr&edit_n LF@edit_n_cond bool@true
 JUMP &substr&process
 LABEL &substr&edit_n
 MOVE LF@_2 LF@max_n
 LABEL &substr&process
 DEFVAR LF@index
 MOVE LF@index LF@_1
 DEFVAR LF@char
 DEFVAR LF@process_loop_cond
 LABEL &substr&process_loop
 GETCHAR LF@char LF@_0 LF@index
 CONCAT LF@_rval LF@_rval LF@char
 ADD LF@index LF@index int@1
 SUB LF@_2 LF@_2 int@1
 GT LF@process_loop_cond LF@_2 int@0
 JUMPIFEQ &substr&process_loop LF@process_loop_cond bool@true
 LABEL &substr&return
 POPFRAME
 RETURN
 LABEL &substrexit
 EXIT int@4

 LABEL &ord
 PUSHFRAME
 DEFVAR LF@_rval_type
 TYPE LF@_rval_type LF@_0
 JUMPIFNEQ &ordexit LF@_rval_type string@string
 TYPE LF@_rval_type LF@_1
 JUMPIFNEQ &ordexit LF@_rval_type string@int
 DEFVAR LF@_rval
 MOVE LF@_rval int@0
 DEFVAR LF@cond_length
 LT LF@cond_length LF@_1 int@0
 JUMPIFEQ &ord&return LF@cond_length bool@true
 DEFVAR LF@str_len
 CREATEFRAME
 DEFVAR TF@_0
 MOVE TF@_0 LF@_0
 CALL &length
 MOVE LF@str_len TF@_rval
 SUB LF@str_len LF@str_len int@1
 GT LF@cond_length LF@_1 LF@str_len
 JUMPIFEQ &ord&return LF@cond_length bool@true
 STRI2INT LF@_rval LF@_0 LF@_1
 LABEL &ord&return
 POPFRAME
 RETURN
 LABEL &ordexit
 EXIT int@4

 LABEL &chr
 PUSHFRAME
 DEFVAR LF@_rval_type
 TYPE LF@_rval_type LF@_0
 JUMPIFNEQ &chrexit LF@_rval_type string@int
 DEFVAR LF@_rval
 MOVE LF@_rval string@
 DEFVAR LF@cond_range
 LT LF@cond_range LF@_0 int@0
 JUMPIFEQ &chr&return LF@cond_range bool@true
 GT LF@cond_range LF@_0 int@255
 JUMPIFEQ &chr&return LF@cond_range bool@true
 INT2CHAR LF@_rval LF@_0
 LABEL &chr&return
 POPFRAME
 RETURN
 LABEL &chrexit
 EXIT int@4
LABEL &type_check
PUSHFRAME
POPS GF@_aux_1
POPS GF@_aux_2
TYPE GF@_aux_1_type GF@_aux_1
TYPE GF@_aux_2_type GF@_aux_2
JUMPIFEQ &must_be_same GF@_aux_1_type string@string
JUMPIFEQ &one_is_int GF@_aux_1_type string@int
JUMPIFEQ &one_is_flt GF@_aux_1_type string@float
LABEL &one_is_int
JUMPIFEQ &must_be_same GF@_aux_2_type string@int
JUMPIFEQ &must_be_same GF@_aux_2_type string@string
INT2FLOAT GF@_aux_1 GF@_aux_1
JUMP &type_check_true
LABEL &one_is_flt
JUMPIFEQ &must_be_same GF@_aux_2_type string@float
JUMPIFEQ &must_be_same GF@_aux_2_type string@string
INT2FLOAT GF@_aux_2 GF@_aux_2
JUMP &type_check_true
LABEL &must_be_same
JUMPIFEQ &type_check_true GF@_aux_1_type GF@_aux_2_type
EXIT int@4
LABEL &type_check_true
PUSHS GF@_aux_2
PUSHS GF@_aux_1
POPFRAME
RETURN
LABEL &&main
CREATEFRAME
PUSHFRAME
<<<<<<< Updated upstream
PUSHS string@vypocet\032faktorialu\010
POPS GF@_exp_res
WRITE GF@_exp_res
DEFVAR LF@a
DEFVAR LF@a_type
MOVE LF@a_type string@nil
READ LF@a int
PUSHS LF@a
PUSHS int@0
CREATEFRAME
CALL &type_check
LTS
POPS GF@_exp_res
JUMPIFEQ &1_2 GF@_exp_res bool@false
PUSHS string@Faktor\010
POPS GF@_exp_res
WRITE GF@_exp_res
JUMP &1_3
LABEL &1_2
DEFVAR LF@vysl
DEFVAR LF@vysl_type
MOVE LF@vysl_type string@nil
PUSHS int@1
PUSHS int@0
CREATEFRAME
CALL &type_check
JUMPIFEQ &cat3 GF@_aux_1_type string@string
JUMP &adds3
LABEL &cat3
POPS GF@_aux_1
POPS GF@_aux_2
CONCAT GF@_aux_1 GF@_aux_2 GF@_aux_1
PUSHS GF@_aux_1
JUMP &notadds3
LABEL &adds3
ADDS
LABEL &notadds3
POPS GF@_exp_res
MOVE LF@vysl GF@_exp_res
LABEL &2_4
PUSHS LF@a
PUSHS int@0
CREATEFRAME
CALL &type_check
GTS
POPS GF@_exp_res
JUMPIFEQ &2_5 GF@_exp_res bool@false
PUSHS LF@vysl
PUSHS LF@a
CREATEFRAME
CALL &type_check
MULS
POPS GF@_exp_res
MOVE LF@vysl GF@_exp_res
PUSHS LF@a
PUSHS int@1
CREATEFRAME
CALL &type_check
SUBS
POPS GF@_exp_res
MOVE LF@a GF@_exp_res
JUMP &2_4
LABEL &2_5
PUSHS string@Vysledek\032je:\032
POPS GF@_exp_res
WRITE GF@_exp_res
PUSHS LF@vysl
POPS GF@_exp_res
WRITE GF@_exp_res
PUSHS string@\010
POPS GF@_exp_res
WRITE GF@_exp_res
LABEL &1_3
=======
DEFVAR LF@c
DEFVAR LF@c_type
MOVE LF@c_type string@nil
MOVE LF@c nil@nil
CREATEFRAME
DEFVAR TF@_0
MOVE TF@_0 int@144
CALL &chr
MOVE LF@c TF@_rval
PUSHS LF@c
POPS GF@_exp_res
WRITE GF@_exp_res
>>>>>>> Stashed changes
POPFRAME
CLEARS
